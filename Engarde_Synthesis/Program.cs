using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using Engarde_Synthesis.Settings;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Aspects;
using Mutagen.Bethesda.Plugins.Cache;
using Mutagen.Bethesda.Plugins.Order;
using Newtonsoft.Json;
using Noggog;

namespace Engarde_Synthesis
{
    /**
     * Engarde Synthesis patcher, for Engarde v4.2
     */
    public static class Program
    {
        #region Statics

        private static Lazy<Settings.Settings> _settings = null!;

        #endregion

        #region Enums

        private enum WeaponCritChance
        {
            None = 0,
            Low = 1,
            Medium = 2,
            High = 3
        }

        private enum WeaponArmorPenetration
        {
            Weak = -1,
            None = 0,
            Strong = 1
        }

        #endregion

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance.AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(nickname: "Settings", path: "settings.json", out _settings)
                .AddRunnabilityCheck(state =>
                    state.LoadOrder.ListedOrder.AssertListsMod(Engarde.ModKey, true,
                        "\n\nEngarde.esp not enabled or above Synthesis.esp in load order.\n\n"))
                .AddRunnabilityCheck(state =>
                {
                    if (state.LoadOrder.ListedOrder.ListsMod(
                            ModKey.FromNameAndExtension("MCTPatch.esp"),
                            enabled: true))
                    {
                        throw new Exception("You have MCTPatch.esp enabled. Disable it and then run Synthesis");
                    }
                })
                .SetTypicalOpen(GameRelease.SkyrimSE, new ModKey("MCTPatch.esp", ModType.Plugin))
                .Run(args);
        }

        #region Auxiliary Methods

        /**
         <summary>
          Changes value of short global by FormKey
         </summary>
        */
        private static void ChangeGlobalShortValue(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            IFormLinkGetter<IGlobalGetter> globalKey, int value)
        {
            var global = globalKey.Resolve(state.LinkCache);
            var globalCopy = (IGlobalShort) state.PatchMod.Globals.GetOrAddAsOverride(global);
            globalCopy.Data = (short) value;
        }

        /**
         <summary>
          Adds a keyword to IKeyworded object
         </summary>
        */
        private static void AddKeyword(this IKeyworded<IKeywordGetter> keyworded,
            IFormLinkGetter<IKeywordGetter> keywordLink)
        {
            keyworded.Keywords ??= new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
            keyworded.Keywords.Add(keywordLink);
        }

        /**
         <summary>
          Calculates Stagger stat for weapon based on it's weight and specified multiplier
         </summary>
        */
        private static void SetStagger(this IWeapon weaponCopy, int defaultWeight, float multiplier)
        {
            var weight = weaponCopy.BasicStats!.Weight;
            if (weight <= 0)
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
            }

            weaponCopy.Data!.Stagger = weight * 0.01f * multiplier;
        }

        /**
         <summary>
          Changes stats of specified weapon <br/>
          All parameters except <paramref name="weaponCopy"/> and <paramref name="defaultWeight"/> are optional <br/> 
         </summary>
        */
        private static void ChangeWeapon(this IWeapon weaponCopy, int defaultWeight, float damageMult = 1,
            float reachMult = 1, float speedMult = 1, float critMult = 1, float staggerMult = 1,
            WeaponCritChance critChance = WeaponCritChance.None,
            WeaponArmorPenetration armorPenetration = WeaponArmorPenetration.None)
        {
            if ( _settings.Value.weaponSettings.bladedCrit)
            {
                IFormLinkGetter<IKeywordGetter> critKey = critChance switch
                {
                    WeaponCritChance.Low => Engarde.Keyword.MCT_CanCritLow,
                    WeaponCritChance.Medium => Engarde.Keyword.MCT_CanCritMed,
                    WeaponCritChance.High => Engarde.Keyword.MCT_CanCritHigh,
                    _ => new FormLink<IKeywordGetter>(FormKey.Null)
                };
                if (!critKey.IsNull)
                {
                    weaponCopy.AddKeyword(critKey);
                }
            }


            if (weaponCopy.Data!.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
            {
                weaponCopy.BasicStats!.Weight = defaultWeight;
                weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
            }
            else
            {
                switch (armorPenetration)
                {
                    case WeaponArmorPenetration.Weak:
                        weaponCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        break;
                    case WeaponArmorPenetration.Strong:
                        weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
                        break;
                    case WeaponArmorPenetration.None:
                        break;
                    default:
                        throw new ArgumentOutOfRangeException(nameof(armorPenetration), armorPenetration, null);
                }
            }

            weaponCopy.BasicStats!.Damage = (ushort) Math.Round(weaponCopy.BasicStats.Damage * damageMult);
            weaponCopy.Data.Speed *= speedMult;
            weaponCopy.Data.Reach *= reachMult;
            weaponCopy.SetStagger(defaultWeight, staggerMult);
            weaponCopy.Critical ??= new CriticalData();
            weaponCopy.Critical.Damage = (ushort) Math.Round(weaponCopy.BasicStats!.Damage *
                                                             _settings.Value.weaponSettings.weaponCritDamageMult *
                                                             critMult);
        }

        /**
        <summary>
         Checks if Attack has attack type before setting a new attack type keyword
        </summary>
       */
        private static void SetAttackType(IAttack attack, FormLink<IKeywordGetter> keyword)
        {
            if (!attack.AttackData!.AttackType.IsNull)
            {
                return;
            }

            attack.AttackData!.AttackType = keyword;
        }

        /**
         <summary>
          Checks if Attack has AttackData, Stagger and AttackEvent
         </summary>
        */
        private static bool IsValidAttack(IAttackGetter attack)
        {
            return attack.AttackData?.Stagger != null && !attack.AttackEvent.IsNullOrEmpty();
        }

        /**
         <summary>
          Copies winning override of Idle Animation into patch by using FormKey
         </summary>
         */
        private static IIdleAnimation CopyIdle(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            IFormLinkGetter<IIdleAnimationGetter> idleLink)
        {
            return state.PatchMod.IdleAnimations.GetOrAddAsOverride(idleLink, state.LinkCache);
        }

        /**
         <summary>
          Changes basic stats of specified attack <br/>
          All parameters except attack are optional <br/> 
         </summary>
        */
        private static void ChangeBasicAttackStats(IAttack attack, int? strikeAngle = null,
                float attackChance = float.NaN,
                float damageMult = 0, float attackAngle = float.NaN)
            //another method just to reduce lines of code(since it have 61 usage =D)
        {
            attack.AttackData!.DamageMult += damageMult;
            if (strikeAngle != null)
            {
                attack.AttackData.StrikeAngle = (float) strikeAngle;
            }

            if (!float.IsNaN(attackAngle))
            {
                attack.AttackData.AttackAngle = attackAngle;
            }

            if (!float.IsNaN(attackChance))
            {
                attack.AttackData.Chance = attackChance;
            }
        }

        private static void SetGeneralAttackData(IAttack attack)
        {
            string attackEvent = attack.AttackEvent!;
            attack.AttackData!.Knockdown = 0;

            switch (attackEvent)
            {
                case "AttackStartH2HRight":
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackRight;
                    break;
                case "AttackStartH2HLeft":
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackLeft;
                    break;
                default:
                {
                    if (attack.AttackData.Spell.IsNull)
                    {
                        if ((attackEvent.Contains("PowerStartLeft") || attackEvent.Contains("PowerStartRight")) &&
                            _settings.Value.powerAttacks.powerAttackTweaks)
                        {
                            attack.AttackData.Spell = Engarde.Spell.MCT_SidePowerAttackSpell;
                        }
                        else if ((attackEvent == "attackPowerStartBackward" ||
                                  attackEvent == "attackPowerStartBackLeftHand") &&
                                 _settings.Value.powerAttacks.powerAttackTweaks)
                        {
                            attack.AttackData.Spell = Engarde.Spell.MCT_BackPowerAttackSpell;
                        }
                        else if (attack.AttackData.Flags.HasFlag(AttackData.Flag.BashAttack))
                        {
                            if (attack.AttackData.Flags.HasFlag(AttackData.Flag.PowerAttack) &&
                                _settings.Value.powerAttacks.powerAttackTweaks)
                            {
                                attack.AttackData.Spell = Engarde.Spell.MCT_PowerBashAttackSpell;
                            }
                            else if (_settings.Value.basicAttacks.basicAttackTweaks)
                            {
                                attack.AttackData.Spell = Engarde.Spell.MCT_BashAttackSpell;
                            }
                        }
                        else if (attack.AttackData.Flags.HasFlag(AttackData.Flag.PowerAttack) &&
                                 _settings.Value.staggerSettings.weaponStagger)
                        {
                            attack.AttackData.Spell = Engarde.Spell.MCT_PowerAttackSpell;
                        }
                        else if (_settings.Value.staggerSettings.weaponStagger)
                        {
                            attack.AttackData.Spell = Engarde.Spell.MCT_NormalAttackSpell;
                        }
                    }

                    break;
                }
            }

            if (attackEvent.Contains("Forward") || attackEvent.Contains("Lunge") || attackEvent.Contains("Bite"))
            {
                attack.AttackData.StrikeAngle = 28;
                SetAttackType(attack, Engarde.Keyword.MCT_VerticalAttack);
            }

            switch (attackEvent)
            {
                case "AttackStart_LeftChop":
                    ChangeBasicAttackStats(attack, 28, attackAngle: -35);
                    break;
                case "AttackStart_RightChop":
                    ChangeBasicAttackStats(attack, 28, attackAngle: 35);
                    break;
                case "attackPowerStartInPlace":
                case "attackPowerStartInPlaceLeftHand":
                    ChangeBasicAttackStats(attack, 28, 1);
                    break;
                case "attackPowerStartForward":
                case "attackPowerStartForwardLeftHand":
                    ChangeBasicAttackStats(attack, 28, 0.1f, 0.5f);
                    attack.AttackData.AttackType = Skyrim.Keyword.PowerAttackTypeForward;
                    break;
                case "attackPowerStartBackward":
                    ChangeBasicAttackStats(attack, 65, 0);
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackPowerStartDualWield":
                {
                    ChangeBasicAttackStats(attack, 50, 1, -0.5f);
                    attack.AttackData.Spell = Engarde.Spell.MCT_DualPowerAttackSpell;
                    break;
                }
                case "attackStartDualWield":
                    ChangeBasicAttackStats(attack, 50, damageMult: -0.25f);
                    break;
                case "attackStart":
                {
                    ChangeBasicAttackStats(attack, 65);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackRight;
                    break;
                }
                case "attackStartLeftHand":
                {
                    ChangeBasicAttackStats(attack, 50);
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_NormalAttackLeft;
                    break;
                }
                case "bashPowerStart":
                    ChangeBasicAttackStats(attack, 80);
                    break;
                default:
                {
                    if (attackEvent.Contains("PowerStartLeft") || attackEvent.Contains("PowerStartRight"))
                    {
                        ChangeBasicAttackStats(attack, 65, 0, -1);
                        attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    }
                    else if (attackEvent.Contains("Chop"))
                    {
                        ChangeBasicAttackStats(attack, 25);
                        SetAttackType(attack, Engarde.Keyword.MCT_VerticalAttack);
                    }
                    else if (attackEvent.Contains("attack") && attackEvent.Contains("Start") &&
                             attackEvent.Contains("Sprint"))
                    {
                        ChangeBasicAttackStats(attack, 28, 2);
                        SetAttackType(attack, Engarde.Keyword.MCT_SprintAttack);
                    }

                    break;
                }
            }
        }

        private static void SetWerewolfAttackData(IAttack attack, bool isWerebeast, bool growlEnabled)
        {
            string attackEvent = attack.AttackEvent!;
            attack.AttackData!.Knockdown = 0;
            if (isWerebeast)
            {
                attack.AttackData.Spell = growlEnabled
                    ? Growl.Spell.HRI_Werewolf_Spell_Attack
                    : Engarde.Spell.MCT_NormalAttackSpell;
            }

            switch (attackEvent)
            {
                case "AttackStartDual":
                case "AttackStartDualRunning":
                    attack.AttackData.Flags = AttackData.Flag.BashAttack;
                    ChangeBasicAttackStats(attack, 45);
                    attack.AttackData.DamageMult = 0.3f;
                    attack.AttackData.Spell.SetToNull();
                    return;
                case "AttackStartDualSprinting":
                case "AttackStartLeftSprinting":
                case "AttackStartRightSprinting":
                    attack.AttackData.Flags = 0;
                    ChangeBasicAttackStats(attack, 55);
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.Spell.MCT_BeastTackleAttackSpell;
                    }

                    return;
                case "attackStartLeft":
                    ChangeBasicAttackStats(attack, strikeAngle: 40, attackAngle: -30);
                    break;
                case "attackStartRight":
                    ChangeBasicAttackStats(attack, strikeAngle: 40, attackAngle: 30);
                    break;
                case "AttackStartLeftPower":
                case "attackStartRightPower":
                    attack.AttackData.Flags |= AttackData.Flag.PowerAttack;
                    ChangeBasicAttackStats(attack, strikeAngle: 40);
                    attack.AttackData.Stagger = 0.1f;
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.Spell.MCT_BeastBleedAttackSpell;
                    }

                    break;
                case "AttackStartLeftRunningPower":
                case "AttackStartRightRunningPower":
                    ChangeBasicAttackStats(attack, 30, attackAngle: 0);
                    SetAttackType(attack, Engarde.Keyword.MCT_VerticalAttack);
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.Spell.MCT_BeastTackleAttackSpell;
                    }

                    break;
                case "AttackStartLeftSide":
                case "AttackStartRightSide":
                    ChangeBasicAttackStats(attack, 20, 0, -0.5f);
                    break;
                case "AttackStartBackHand":
                    ChangeBasicAttackStats(attack, 90, 0, attackAngle: 0);
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    attack.AttackData.StaminaMult = 1.0f;
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_SweepAttack;
                    if (isWerebeast)
                    {
                        attack.AttackData.Spell = Engarde.Spell.MCT_BackPowerAttackSpell;
                    }

                    break;
            }
        }

        private static void SetDragonAttackData(IAttack attack)
        {
            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackStartBite":
                    ChangeBasicAttackStats(attack, 20);
                    attack.AttackData!.Spell = Engarde.Spell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartBiteLeft":
                    ChangeBasicAttackStats(attack, 20, attackAngle: -40);
                    attack.AttackData!.Spell = Engarde.Spell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartBiteRight":
                    ChangeBasicAttackStats(attack, 20, attackAngle: 40);
                    attack.AttackData!.Spell = Engarde.Spell.MCT_DragonBiteAttackSpell;
                    break;
                case "attackStartTail":
                    ChangeBasicAttackStats(attack, 15, 2);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell.SetToNull();
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttack;
                    break;
                case "attackStartTailLeft":
                    ChangeBasicAttackStats(attack, 40, attackAngle: 110);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell.SetToNull();
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttackLeft;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartTailRight":
                    ChangeBasicAttackStats(attack, 40, attackAngle: -110);
                    attack.AttackData!.DamageMult = 0;
                    attack.AttackData.Spell.SetToNull();
                    attack.AttackData.AttackType = Engarde.Keyword.MCT_DragonTailAttackRight;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartWingLeft":
                    ChangeBasicAttackStats(attack, 20, attackAngle: -80);
                    attack.AttackData!.DamageMult = 0.5f;
                    attack.AttackData.Spell = Engarde.Spell.MCT_PowerAttackSpell;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
                case "attackStartWingRight":
                    ChangeBasicAttackStats(attack, 20, attackAngle: 80);
                    attack.AttackData!.DamageMult = 0.5f;
                    attack.AttackData.Spell = Engarde.Spell.MCT_PowerAttackSpell;
                    attack.AttackData.Flags |= AttackData.Flag.RotatingAttack;
                    break;
            }
        }

        private static void SetSpiderAttackData(IAttack attack, FormLink<ISpellGetter> attackSpellForm)
        {
            string attackEvent = attack.AttackEvent!;
            if (attackEvent == "AttackStartLungeBite")
            {
                ChangeBasicAttackStats(attack, 45);
                attack.AttackData!.Spell = Engarde.Spell.MCT_PowerAttackSpell;
            }

            if (attackEvent == "AttackStart_ComboChop")
            {
                ChangeBasicAttackStats(attack, 20);
            }

            if (attackEvent.Contains("Bite"))
            {
                attack.AttackData!.Spell = attackSpellForm;
            }
        }

        private static void SetGiantAttackData(IAttack attack, bool isGiant)
        {
            string attackEvent = attack.AttackEvent!;
            switch (attackEvent)
            {
                case "attackPowerStart_ForwardPowerAttack":
                    ChangeBasicAttackStats(attack, 15, 2, attackAngle: 10);
                    SetAttackType(attack, Engarde.Keyword.MCT_VerticalAttack);
                    break;
                case "attackPowerStart_Stomp":
                    ChangeBasicAttackStats(attack, 30, 0.3f);
                    attack.AttackData!.AttackType = Engarde.Keyword.MCT_StompAttack;
                    break;
                case "attackStart_ClubAttack1":
                {
                    ChangeBasicAttackStats(attack, 50, attackAngle: 35);
                    if (isGiant)
                    {
                        attack.AttackData!.Flags |= AttackData.Flag.PowerAttack;
                        attack.AttackData.Spell = Engarde.Spell.MCT_PowerAttackSpell;
                    }

                    break;
                }
                case "attackStart_HandSwipeAttack":
                {
                    ChangeBasicAttackStats(attack, 50, attackAngle: -35);
                    if (isGiant)
                    {
                        attack.AttackData!.Flags |= AttackData.Flag.PowerAttack;
                        attack.AttackData.Spell = Engarde.Spell.MCT_PowerAttackSpell;
                    }

                    break;
                }
                case "bashStart":
                    ChangeBasicAttackStats(attack, damageMult: -0.5f);
                    attack.AttackData!.Spell = Engarde.Spell.MCT_NormalAttackSpell;
                    break;
            }
        }

        #endregion

        #region Patcher Methods

        private static void PatchArmors(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static bool Predicate(IArmorGetter armor)
            {
                try
                {
                    return (!armor.BodyTemplate?.Flags.HasFlag(BodyTemplate.Flag.NonPlayable) ?? false) &&
                           armor.TemplateArmor.IsNull &&
                           (armor.BodyTemplate?.FirstPersonFlags.HasFlag(BipedObjectFlag.Body) ?? false);
                }
                catch (ArgumentException e)
                {
                    throw new ArgumentException($"Broken record encountered: {armor.FormKey}", e);
                }
            }

            List<IArmorGetter> armorToPatch = state.LoadOrder.PriorityOrder.Armor().WinningOverrides()
                .AsParallel()
                .Where(Predicate)
                .ToList();
            foreach (IArmorGetter armor in armorToPatch)
            {
                switch (armor.BodyTemplate!.ArmorType)
                {
                    case ArmorType.LightArmor:
                    {
                        Armor armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                        armorCopy.Keywords ??= new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_StaggerResist1);
                        break;
                    }
                    case ArmorType.HeavyArmor:
                    {
                        Armor armorCopy = state.PatchMod.Armors.GetOrAddAsOverride(armor);
                        armorCopy.Keywords ??= new ExtendedList<IFormLinkGetter<IKeywordGetter>>();
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_StaggerResist2);
                        armorCopy.Keywords.Add(Engarde.Keyword.MCT_ArmoredKW);
                        break;
                    }
                    case ArmorType.Clothing: continue;
                    default: continue;
                }
            }
        }

        private static void PatchGlobals(this IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            ChangeGlobalShortValue(state, Engarde.Global.MCT_AttackSpeedFixEnabled,
                _settings.Value.fixAttackSpeed ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PlayerAttackControlEnabled,
                _settings.Value.basicAttacks.basicAttackTweaks ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PowerAttackControlEnabled,
                _settings.Value.powerAttacks.powerAttackTweaks ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_StaggerByArrowEnabled,
                _settings.Value.staggerSettings.bowStagger ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_DefensiveActionEnabled,
                _settings.Value.defensiveActions.defensiveActions ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_PowerAttackCoolDownTime,
                _settings.Value.powerAttacks.powerAttackCooldown);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_CGOIntegrationEnabled,
                state.LoadOrder.TryGetValue(ModKey.FromNameAndExtension("DSerCombatGameplayOverhaul.esp"), out var listing) && listing.Enabled
                    ? 1
                    : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_WeakToArmorEnabled,
                _settings.Value.weaponSettings.weakToArmor ? 1 : 0);
            ChangeGlobalShortValue(state, Engarde.Global.MCT_SpellSwordBlockingEnabled,
                _settings.Value.basicAttacks.spellSwordBlocking ? 1 : 0);
        }

        private static void PatchWeapons(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            List<IWeaponGetter> weaponsToPatch = state.LoadOrder.PriorityOrder.Weapon().WinningOverrides()
                .AsParallel()
                .Where(weapon => weapon.Template.IsNull && weapon.BasicStats != null && weapon.Data != null &&
                                 !weapon.EditorID!.StartsWith("REQ_Dummy_"))
                .ToList();
            foreach (var weaponCopy in weaponsToPatch.Select(
                weapon => state.PatchMod.Weapons.GetOrAddAsOverride(weapon)))
            {
                weaponCopy.Data!.Speed *= _settings.Value.weaponSettings.weaponSpeedMult;
                weaponCopy.Data.Reach *= _settings.Value.weaponSettings.weaponReachMult;
                var damage = weaponCopy.BasicStats!.Damage;
                weaponCopy.BasicStats.Damage =
                    (ushort) Math.Round(damage * _settings.Value.weaponSettings.weaponDamageMult);
                if (weaponCopy.BasicStats.Weight == 0)
                {
                    weaponCopy.BasicStats.Weight = 4;
                }

                if (_settings.Value.staggerSettings.critStagger && (weaponCopy.Critical?.Effect.IsNull ?? false))
                {
                    weaponCopy.Critical.Effect = Engarde.Spell.MCT_CritAttackSpell;
                    weaponCopy.Critical.Flags = 0;
                }

                switch (weaponCopy.Data.AnimationType)
                {
                    case WeaponAnimationType.HandToHand:
                    {
                        if (weaponCopy.Data.Flags.HasFlag(WeaponData.Flag.BoundWeapon))
                        {
                            weaponCopy.BasicStats.Weight = 2;
                            weaponCopy.AddKeyword(Engarde.Keyword.MCT_PenetratesArmorKW);
                        }

                        if (weaponCopy.EditorID == "HRI_Lycan_Weapon_UnarmedWereformWeapon")
                        {
                            weaponCopy.BasicStats.Weight = 4;
                            weaponCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        }

                        break;
                    }
                    case WeaponAnimationType.OneHandSword:
                        weaponCopy.ChangeWeapon(8, reachMult: 1.15f, staggerMult: 0.85f,
                            critChance: WeaponCritChance.Medium, armorPenetration: WeaponArmorPenetration.Weak);

                        // The sword dragonbane is exception, it isn't weak to armor / dragonscale
                        if (weaponCopy.EditorID!.Contains("MQ203AkaviriKatana"))
                        {
                            weaponCopy.Keywords!.Remove(Engarde.Keyword.MCT_WeakAgainstArmored);
                        }

                        break;
                    case WeaponAnimationType.OneHandDagger:
                        weaponCopy.ChangeWeapon(3, reachMult: 1.1f, critMult: 2, critChance: WeaponCritChance.High,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.OneHandAxe:
                        weaponCopy.ChangeWeapon(10, 1.1f, 0.9f, 1.1f);
                        break;
                    case WeaponAnimationType.OneHandMace:
                        weaponCopy.ChangeWeapon(12, critMult: 0.5f);
                        break;
                    case WeaponAnimationType.TwoHandSword:
                    case WeaponAnimationType.TwoHandAxe
                        when weaponCopy.HasKeyword(Skyrim.Keyword.WeapTypeGreatsword):
                        weaponCopy.ChangeWeapon(14, 0.8f, 1.15f, staggerMult: 1.35f, critChance: WeaponCritChance.Low,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.TwoHandAxe
                        when weaponCopy.HasKeyword(Skyrim.Keyword.WeapTypeWarhammer):
                        weaponCopy.ChangeWeapon(18, 0.8f, speedMult: 0.9f, critMult: 0.5f, staggerMult: 1.65f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    case WeaponAnimationType.TwoHandAxe:
                    {
                        weaponCopy.ChangeWeapon(16, 0.9f, reachMult: 0.8f, speedMult: 1.1f, staggerMult: 1.5f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    }
                    case WeaponAnimationType.Crossbow:
                    case WeaponAnimationType.Bow when weaponCopy.EditorID?.ToLower().Contains("crossbow") ?? false:
                        weaponCopy.ChangeWeapon(12, critMult: 2, staggerMult: 1.5f,
                            armorPenetration: WeaponArmorPenetration.Strong);
                        break;
                    case WeaponAnimationType.Bow:
                        weaponCopy.ChangeWeapon(8, armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    case WeaponAnimationType.Staff:
                        weaponCopy.ChangeWeapon(8, reachMult: 1.15f, critMult: 0.5f,
                            armorPenetration: WeaponArmorPenetration.Weak);
                        break;
                    default: continue;
                }
            }
        }

        private static void PatchRaces(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var raceCopy in state.LoadOrder.PriorityOrder.Race()
                .WinningOverrides()
                .Where(race => race.EditorID != null)
                .Select(race => state.PatchMod.Races.GetOrAddAsOverride(race)))
            {
                raceCopy.AngularAccelerationRate = _settings.Value.npcSettings.angularAccelerationMult * 0.25f;
                raceCopy.UnarmedReach = 77;
                raceCopy.UnarmedDamage *= _settings.Value.npcSettings.unarmedDamageMult;

                raceCopy.ActorEffect ??= new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();

                if (_settings.Value.fixAttackSpeed)
                {
                    raceCopy.ActorEffect.Add(Engarde.Spell.MCT_BaseWeaponSpeedMultSpell);
                }

                if (_settings.Value.staggerSettings.bowStagger)
                {
                    raceCopy.ActorEffect.Add(Engarde.Spell.MCT_DefaultRaceSpell);
                }

                if (raceCopy.EditorID != "WerewolfBeastRace")
                {
                    raceCopy.Attacks.Where(IsValidAttack).ForEach(SetGeneralAttackData);
                }

                if (raceCopy.HasKeyword(Skyrim.Keyword.ActorTypeUndead))
                {
                    raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                    raceCopy.AddKeyword(Engarde.Keyword.MCT_NoStamina);
                }
            }
        }

        private static void PatchPerks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IPerk CopyPerk(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState,
                IFormLinkGetter<IPerkGetter> perkLink)
            {
                return patcherState.PatchMod.Perks.GetOrAddAsOverride(perkLink, patcherState.LinkCache);
            }

            IPerk perkCopy = CopyPerk(state, Engarde.Perk.MCT_MultDamageOnForwardPowerAttack);
            PerkEntryPointModifyValue perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value = _settings.Value.powerAttacks.forwardDamageMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_MultDamageOnSidePowerAttack);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value = _settings.Value.powerAttacks.sideDamageMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_ArrowAttackedSlowTimePerk);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value *= _settings.Value.combatFocus.playerSpeedMult;

            perkCopy = CopyPerk(state, Engarde.Perk.MCT_PowerAttackedSlowTimePerk);
            perkEffect = (PerkEntryPointModifyValue) perkCopy.Effects[0];
            perkEffect.Value *= _settings.Value.combatFocus.playerSpeedMult;
        }

        private static void PatchNpcs(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            bool Predicate(INpcGetter npc)
            {
                if (npc.Race.IsNull) return false;
                if (!npc.Race.TryResolve(state.LinkCache, out var race))
                {
                    Console.WriteLine($"NPC Record reference another record that doesn't exist:{npc.FormKey}");
                    return false;
                }

                string? editorId = race.EditorID;
                if (editorId == null)
                {
                    return false;
                }

                return !npc.Configuration.TemplateFlags.HasFlag(NpcConfiguration.TemplateFlag.SpellList) &&
                       !editorId.IsNullOrEmpty() && (npc.Attacks.Count != 0 ||
                                                     editorId.Contains("GiantRace") ||
                                                     editorId.Contains("LurkerRace"));
            }

            List<INpcGetter> npcsToPatch = state.LoadOrder.PriorityOrder.Npc().WinningOverrides()
                .AsParallel()
                .Where(Predicate)
                .ToList();

            foreach (INpcGetter npc in npcsToPatch)
            {
                string npcRaceEdid = npc.Race.Resolve(state.LinkCache).EditorID!;

                /*npcRaceEdid!.Contains("Dragon") && !npcRaceEdid.Contains("Priest")
                || npcRaceEdid == "AlduinRace" ||*/

                if (_settings.Value.staggerSettings.weaponStagger)
                {
                    Npc npcCopy = npc.DeepCopy();
                    var changed = false;
                    npcCopy.Attacks.Where(IsValidAttack).ForEach(attack =>
                    {
                        if (!attack.AttackData!.Spell.IsNull ||
                            attack.AttackData.Flags.HasFlag(AttackData.Flag.BashAttack)) return;
                        attack.AttackData.Spell = Engarde.Spell.MCT_NormalAttackSpell;
                        changed = true;
                    });
                    if (changed)
                    {
                        state.PatchMod.Npcs.Set(npcCopy);
                    }
                }

                if (npcRaceEdid.Contains("GiantRace") || npcRaceEdid.Contains("LurkerRace"))
                {
                    INpc npcCopy = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                    npcCopy.Perks ??= new ExtendedList<PerkPlacement>();
                    npcCopy.Perks.Add(new PerkPlacement {Perk = Engarde.Perk.MCT_VolnerabilityCritical, Rank = 1});
                }
            }
        }

        private static void PatchAttacks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var leftHandAttack = Skyrim.IdleAnimation.LeftHandAttack;
            var mctAttackLeftH2H = Engarde.IdleAnimation.MCTAttackLeftH2H;
            var nonMountedCombatRight = Update.IdleAnimation.NonMountedCombatRight;
            IFormLink<IIdleRelationGetter> originalNormalAttackSibling = new FormLink<IIdleRelationGetter>();
            IFormLink<IIdleRelationGetter> originalH2HAttackSibling = new FormLink<IIdleRelationGetter>();
            IFormLink<IIdleRelationGetter> originalLeftHandAttackSibling = new FormLink<IIdleRelationGetter>();
            ConditionFloat staminaCondition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = _settings.Value.staminaSettings.minimumStamina,
                Data = new GetActorValueConditionData()
                {
                    ActorValue = ActorValue.Stamina
                }
            };
            ConditionFloat staminaPercentCondition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = 0.5f,
                Data = new GetActorValueConditionData()
                {
                    ActorValue = ActorValue.Stamina
                }
            };

            var isLastAttackData = new GetVMQuestVariableConditionData();
            isLastAttackData.Quest.Link.SetTo(Engarde.Quest.MCT_StatChecker);
            isLastAttackData.VariableName = "::lastAttackIsRightHand_var";
            ConditionFloat lastAttackIsRightCondition = new()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Data = isLastAttackData
            };

            var isStaggeringAttackData = new GetVMQuestVariableConditionData();
            isStaggeringAttackData.Quest.Link.SetTo(Engarde.Quest.MCT_StatChecker);
            isStaggeringAttackData.VariableName = "::isStaggeringAttack_var";
            ConditionFloat isStaggeringAttackCondition = new()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Data = isStaggeringAttackData
            };

            var incorporealQuestVariableData = new GetVMQuestVariableConditionData();
            incorporealQuestVariableData.Quest.Link.SetTo(Engarde.Quest.MCT_StatChecker);
            incorporealQuestVariableData.VariableName = "::incorporeal_var";
            ConditionFloat incorporealCheckCondition = new()
            {
                CompareOperator = CompareOperator.NotEqualTo,
                ComparisonValue = 1,
                Data = incorporealQuestVariableData
            };
            if (_settings.Value.basicAttacks.basicAttackTweaks)
            {
                var idleCopy = CopyIdle(state, Skyrim.IdleAnimation.NormalAttack);
                idleCopy.Conditions.Last().Flags = 0;
                idleCopy.Conditions.Add(staminaCondition);
                idleCopy.Conditions.Add(incorporealCheckCondition);
                originalNormalAttackSibling.SetTo(idleCopy.RelatedIdles[1]);
                if (_settings.Value.basicAttacks.dwAttackTweaks && _settings.Value.basicAttacks.dwAlternateSwings)
                {
                    idleCopy.RelatedIdles[1] = leftHandAttack;
                }

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackRightH2H);
                idleCopy.Conditions.Add(staminaCondition);
                originalH2HAttackSibling.SetTo(idleCopy.RelatedIdles[1]);
                if (_settings.Value.basicAttacks.h2HAttackTweaks && _settings.Value.basicAttacks.dwAlternateSwings)
                {
                    idleCopy.RelatedIdles[1] = mctAttackLeftH2H;
                }

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.BowAttack);
                idleCopy.Conditions.Add(staminaCondition);


                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.DualWieldPowerAttack);
                idleCopy.Conditions.Add(staminaCondition);

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PlayerStagger);
                var getAttackState = new GetAttackStateConditionData();
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 1,
                    Data = getAttackState
                });
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 2,
                    Data = getAttackState
                });
                idleCopy.AnimationEvent = "recoilLargeStart";
            }

            if (_settings.Value.basicAttacks.basicAttackTweaks && _settings.Value.basicAttacks.dwAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.LeftHandAttack);
                originalLeftHandAttackSibling.SetTo(idleCopy.RelatedIdles[1]);
                if (_settings.Value.basicAttacks.dwAlternateSwings) { 
                    idleCopy.RelatedIdles[0] = nonMountedCombatRight;
                    idleCopy.RelatedIdles[1] = originalNormalAttackSibling;
                    idleCopy.Conditions.Add(lastAttackIsRightCondition);
                }
                idleCopy.Conditions.Add(staminaCondition);
                idleCopy.Conditions.Add(incorporealCheckCondition);
            }

            if (_settings.Value.basicAttacks.basicAttackTweaks && _settings.Value.basicAttacks.h2HAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackLeftH2H);
                idleCopy.AnimationEvent = "blockStart";

                idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTAttackLeftH2H);
                idleCopy.RelatedIdles[0] = nonMountedCombatRight;
                idleCopy.RelatedIdles[1] = originalH2HAttackSibling;
                idleCopy.Conditions.Add(staminaCondition);
            }

            if (_settings.Value.powerAttacks.powerAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTPowerAttackRoot);
                idleCopy.RelatedIdles[0] = Skyrim.IdleAnimation.SheathRight;
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.DragonstaggerStart);
                idleCopy.Conditions.Add(isStaggeringAttackCondition);
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.FlyStartTakeOff);
                idleCopy.Conditions.Add(staminaPercentCondition);

                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.FlyStartTakeOffVertical);
                idleCopy.Conditions.Add(staminaPercentCondition);
            }

            if (_settings.Value.basicAttacks.dwAttackTweaks)
            {
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.BlockingStart);
                int index = idleCopy.RelatedIdles.FindIndex(x => x.Equals(Skyrim.IdleAnimation.LeftHandAttack));
                idleCopy.RelatedIdles[index] = originalLeftHandAttackSibling;
            }

            if (_settings.Value.basicAttacks.basicAttackTweaks && _settings.Value.basicAttacks.spellSwordBlocking)
            {
                // StopBlocking idle works for both when  
                IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.StopBlocking);
                idleCopy.Conditions[0].Flags = Condition.Flag.OR; // wantBlocking
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    // or isBlocking
                    CompareOperator = CompareOperator.EqualTo,
                    ComparisonValue = 1,
                    Data = new IsBlockingConditionData()
                });

                // AttackMagicLeftRoot idle only works when
                idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackMagicLeftRoot);
                var getVmQuestVariableData = new GetVMQuestVariableConditionData();
                getVmQuestVariableData.Quest.Link.SetTo(Engarde.Quest.MCT_ModifierKeyListener);
                getVmQuestVariableData.VariableName = "::keyDown_var";
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    // modifier key (walk) is down
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 1,
                    Data = getVmQuestVariableData
                });

                var getIsIdConditionData = new GetIsIDConditionData();
                getIsIdConditionData.Object.Link.SetTo(Skyrim.Npc.Player);
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    // or not player
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 0,
                    Data = getIsIdConditionData
                });

                var getEquippedConditionData = new GetEquippedItemTypeConditionData();
                getEquippedConditionData.ItemSource = CastSource.Right;
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    // or don't have anything equipped on right hand
                    CompareOperator = CompareOperator.EqualTo,
                    Flags = Condition.Flag.OR,
                    ComparisonValue = 0,
                    Data = getEquippedConditionData
                });
                
                
                idleCopy.Conditions.Add(new ConditionFloat
                {
                    // or don't have melee weapons equipped on right hand
                    CompareOperator = CompareOperator.GreaterThan,
                    ComparisonValue = 6,
                    Data = getEquippedConditionData
                });

                // MCTSpellSwordBlockingStart idle put it after BlockingStart
                idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTSpellSwordBlockingStart);
                idleCopy.RelatedIdles[0] = Update.IdleAnimation.NonMountedCombatLeft;
                idleCopy.RelatedIdles[1] = Skyrim.IdleAnimation.BlockingStart;
            }
        }

        private static void PatchPowerAttacks(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var disableConditionData = new GetIsIDConditionData();
            disableConditionData.Object.Link.SetTo(Skyrim.Npc.Player);
            Condition disableCondition = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 0,
                Data = disableConditionData
            };

            if (!_settings.Value.powerAttacks.powerAttackTweaks) return;
            List<IIdleAnimation> idlesToDisable = new()
            {
                CopyIdle(state, Skyrim.IdleAnimation.DualWieldPowerAttackRoot),
                CopyIdle(state, Skyrim.IdleAnimation.DualWieldSpecialPowerAttack),
                CopyIdle(state, Skyrim.IdleAnimation.AttackRightPower2HMForwardSprinting),
                CopyIdle(state, Skyrim.IdleAnimation.AttackRightPower2HWForwardSprinting),
                CopyIdle(state, Skyrim.IdleAnimation.AttackRightPowerForwardSprinting),
                CopyIdle(state, Skyrim.IdleAnimation.H2HRightHandPowerAttack),
                CopyIdle(state, Skyrim.IdleAnimation.H2HLeftHandPowerAttack)
            };

            idlesToDisable.ForEach(idle => idle.Conditions.Add(disableCondition));


            IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PowerBash);
            idleCopy.Conditions[1] = disableCondition;


            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.PowerAttack);
            idleCopy.Conditions[0] = disableCondition;

            // sheathe can be triggered from script too
            /*ConditionFloat wantsToSheathe = new ()
            {
                CompareOperator = CompareOperator.EqualTo,
                Flags = Condition.Flag.OR,
                ComparisonValue = 1,
                Data = new FunctionConditionData
                {
                    Function = Condition.Function.GetVMQuestVariable,
                    ParameterOneRecord = Engarde.Quest.MCT_SheathKeyListener,
                    ParameterTwoString = "::wantsToSheathe_var"
                }
            };*/
        }

        private static void PatchDodges(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.defensiveActions.defensiveActions)
            {
                return;
            }

            foreach (IIdleAnimationGetter idle in state.LoadOrder.PriorityOrder.IdleAnimation().WinningOverrides()
                .Where(idle => !idle.EditorID.IsNullOrEmpty()))
            {
                if (idle.EditorID!.Contains("MCTHeavyArmorDodge") || idle.EditorID.Contains("MCTLightArmorDodge"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    ConditionFloat condition = (ConditionFloat) idleCopy.Conditions[0];
                    condition.ComparisonValue = _settings.Value.staminaSettings.minimumDodgeStamina;
                    idleCopy.Conditions[0] = condition;
                }
                else if (idle.EditorID.Contains("HeavyArmor"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    string animationType = "";
                    if (_settings.Value.defensiveActions.heavyArmorDodge == DodgeType.Step)
                    {
                        animationType = "Run";
                    }

                    string animationEvent = "mctEscape";
                    if (idleCopy.EditorID!.Contains("Forward"))
                    {
                        animationEvent += "Forward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Backward"))
                    {
                        animationEvent += "Backward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Right"))
                    {
                        animationEvent += "Right" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Left"))
                    {
                        animationEvent += "Left" + animationType + "Start";
                    }
                    else
                    {
                        animationType = "Run";
                        animationEvent += "Standing" + animationType + "Start";
                    }

                    idleCopy.AnimationEvent = animationEvent;
                }
                else if (idle.EditorID.Contains("LightArmor"))
                {
                    IIdleAnimation idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    string animationType = "";
                    if (_settings.Value.defensiveActions.lightArmorDodge == DodgeType.Step)
                    {
                        animationType = "Run";
                    }

                    string animationEvent = "mctEscape";
                    if (idleCopy.EditorID!.Contains("Forward"))
                    {
                        animationEvent += "Forward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Backward"))
                    {
                        animationEvent += "Backward" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Right"))
                    {
                        animationEvent += "Right" + animationType + "Start";
                    }
                    else if (idleCopy.EditorID.Contains("Left"))
                    {
                        animationEvent += "Left" + animationType + "Start";
                    }
                    else
                    {
                        animationType = "Run";
                        animationEvent += "Standing" + animationType + "Start";
                    }

                    idleCopy.AnimationEvent = animationEvent;
                }
            }
        }

        private static void PatchWerewolves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.npcSettings.werewolfTweaks)
            {
                return;
            }

            var conditionData = new GetActorValueConditionData();
            conditionData.ActorValue = ActorValue.Stamina;
            ConditionFloat condition = new()
            {
                CompareOperator = CompareOperator.GreaterThan,
                ComparisonValue = _settings.Value.staminaSettings.minimumStamina,
                Data = conditionData
            };

            IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfRightAttackFast);
            idleCopy.Conditions.Add(condition);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfAttackLeftFast);
            idleCopy.Conditions.Add(condition);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.AttackStartDualBackHand);
            idleCopy.Conditions.Add(condition);
            idleCopy.AnimationEvent = "AttackStartDual";

            if (!_settings.Value.powerAttacks.powerAttackTweaks ||
                state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Brevi_MoonlightTales.esp")) ||
                state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Moonlight Tales Special Edition.esp")))
            {
                return;
            }

            // vanilla power attack, disable for player
            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfLeftPowerAttackRoot);
            idleCopy.Conditions[3].CompareOperator = CompareOperator.NotEqualTo;

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.WerewolfRightPowerAttackRoot);
            idleCopy.Conditions[3].CompareOperator = CompareOperator.NotEqualTo;

            // new power attack
            idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTPowerAttackBeastRoot);
            idleCopy.RelatedIdles[0] = Skyrim.IdleAnimation.WerewolfSheathRoot;
        }

        private static void PatchKillmoves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.npcSettings.playerKillMoveImmune)
            {
                return;
            }

            var disableConditionData = new GetIsIDConditionData();
            disableConditionData.Object.Link.SetTo(Skyrim.Npc.Player);
            disableConditionData.RunOnType = Condition.RunOnType.Target;
            Condition disableCondition = new ConditionFloat()
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 0,
                Data = disableConditionData
            };


            HashSet<IIdleAnimation> killmovesToDisable = new()
            {
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveShortRoot00),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveBackSideRoot00),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveShortRoot),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveBackSideRoot),
                CopyIdle(state, Skyrim.IdleAnimation.KillMoveDragonToNPC)
            };

            killmovesToDisable.ForEach(idle => idle.Conditions.Add(disableCondition));
        }

        private static void PatchIdles(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            IIdleAnimation idleCopy;

            List<IIdleAnimationGetter> idlesToPatch = state.LoadOrder.PriorityOrder.IdleAnimation().WinningOverrides()
                .AsParallel()
                .Where(idle => idle.EditorID != "MCTDefensiveMoves" && idle.EditorID != "BlockHit" &&
                               idle.EditorID != "MCTPowerAttackRoot" && idle.EditorID != "MCTPowerAttackBeastRoot" &&
                               idle.EditorID != "MCTDefensiveMovesRoot")
                .ToList();
            foreach (IIdleAnimationGetter idle in idlesToPatch)
            {
                if (_settings.Value.powerAttacks.powerAttackTweaks &&
                    Equals(idle.RelatedIdles[0], Skyrim.IdleAnimation.SheathRight) && idle.RelatedIdles[1].IsNull)
                {
                    idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    idleCopy.RelatedIdles[1] = Engarde.IdleAnimation.MCTPowerAttackRoot;
                    continue;
                }

                if (_settings.Value.powerAttacks.powerAttackTweaks &&
                    Equals(idle.RelatedIdles[0], Skyrim.IdleAnimation.WerewolfSheathRoot) &&
                    idle.RelatedIdles[1].IsNull)
                {
                    idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    idleCopy.RelatedIdles[1] = Engarde.IdleAnimation.MCTPowerAttackBeastRoot;
                    continue;
                }

                if (_settings.Value.defensiveActions.defensiveActions &&
                    Equals(idle.RelatedIdles[0], Skyrim.IdleAnimation.SneakRoot) && idle.RelatedIdles[1].IsNull)
                {
                    idleCopy = state.PatchMod.IdleAnimations.GetOrAddAsOverride(idle);
                    idleCopy.RelatedIdles[1] = Engarde.IdleAnimation.MCTDefensiveMovesRoot;
                }
            }

            var isNotPlayerData = new GetIsIDConditionData();
            isNotPlayerData.Object.Link.SetTo(Skyrim.Npc.Player);
            Condition isNotPlayer = new ConditionFloat
            {
                ComparisonValue = 0,
                CompareOperator = CompareOperator.EqualTo,
                Flags = Condition.Flag.OR,
                Data = isNotPlayerData
            };

            var sprintToSneakIsOffData = new GetGlobalValueConditionData();
            sprintToSneakIsOffData.Global.Link.SetTo(Engarde.Global.MCT_SprintToSneakEnabled);
            Condition sprintToSneakIsOff = new ConditionFloat
            {
                ComparisonValue = 0,
                CompareOperator = CompareOperator.EqualTo,
                Flags = Condition.Flag.OR,
                Data = sprintToSneakIsOffData
            };

            Condition isNotMovingForward = new ConditionFloat
            {
                ComparisonValue = 1,
                CompareOperator = CompareOperator.NotEqualTo,
                Data = new GetMovementDirectionConditionData()
            };

            // sneak start/stop, only perform for others or when player wants to sneak
            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.SneakStart);
            idleCopy.Conditions.Add(isNotPlayer);
            idleCopy.Conditions.Add(sprintToSneakIsOff);
            idleCopy.Conditions.Add(isNotMovingForward);

            idleCopy = CopyIdle(state, Skyrim.IdleAnimation.SneakStop);
            idleCopy.Conditions.Add(isNotPlayer);
            idleCopy.Conditions.Add(sprintToSneakIsOff);
            idleCopy.Conditions.Add(isNotMovingForward);
        }

        private static void PatchDefensiveMoves(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.defensiveActions.defensiveActions)
            {
                return;
            }

            var isPowerBlockingData = new HasMagicEffectConditionData();
            isPowerBlockingData.MagicEffect.Link.SetTo(Engarde.MagicEffect.MCT_PowerBlocking);
            Condition isPowerBlocking = new ConditionFloat
            {
                ComparisonValue = 0,
                CompareOperator = CompareOperator.EqualTo,
                Data = isPowerBlockingData
            };

            Condition isBlocking = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Flags = Condition.Flag.OR,
                Data = new IsBlockingConditionData()
            };

            var isStaggeredData = new GetGraphVariableIntConditionData();
            isStaggeredData.GraphVariable = "IsStaggering";
            Condition isStaggered = new ConditionFloat
            {
                CompareOperator = CompareOperator.EqualTo,
                ComparisonValue = 1,
                Data = isStaggeredData
            };


            IIdleAnimation idleCopy = CopyIdle(state, Skyrim.IdleAnimation.BlockHit);
            idleCopy.Conditions.Add(isPowerBlocking);

            idleCopy = CopyIdle(state, Engarde.IdleAnimation.MCTDefensiveMovesRoot);
            idleCopy.RelatedIdles[0] = Skyrim.IdleAnimation.SneakRoot;

            if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Ultimate Dodge Mod.esp")))
            {
                idleCopy.Conditions.Add(isBlocking);
                idleCopy.Conditions.Add(isStaggered);
            }
        }

        private static void PatchEffects(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IMagicEffect CopyEffect(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
                IFormLinkGetter<IMagicEffectGetter> formLink)
            {
                return state.PatchMod.MagicEffects.GetOrAddAsOverride(formLink, state.LinkCache);
            }

            VirtualMachineAdapter fireScript = new()
            {
                Scripts =
                {
                    new ScriptEntry
                    {
                        Flags = ScriptEntry.Flag.Local,
                        Name = "MCT_ApplyBurning",
                        Properties =
                        {
                            new ScriptObjectProperty
                            {
                                Name = "MCT_BurningSpell",
                                Flags = ScriptProperty.Flag.Edited,
                                Object = Engarde.Spell.MCT_BurningSpell
                            }
                        }
                    }
                }
            };
            VirtualMachineAdapter frostScript = new()
            {
                Scripts =
                {
                    new ScriptEntry
                    {
                        Flags = ScriptEntry.Flag.Local,
                        Name = "MCT_ApplyFrostSlow",
                        Properties =
                        {
                            new ScriptObjectProperty
                            {
                                Name = "MCT_FrostSlowSpell",
                                Flags = ScriptProperty.Flag.Edited,
                                Object = Engarde.Spell.MCT_FrostSlowSpell
                            }
                        }
                    }
                }
            };
            if (_settings.Value.npcSettings.dragonTweaks)
            {
                List<IMagicEffect> dragonBreaths = new()
                {
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFireBreathEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFireballEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFrostBreathEffect1),
                    CopyEffect(state, Skyrim.MagicEffect.VoiceDragonFrostIceStormEffect)
                };

                for (int i = 0; i < 2; i++) // fire effects
                {
                    dragonBreaths[i].AddKeyword(Engarde.Keyword.MCT_BlockableSpell);
                    dragonBreaths[i].TaperDuration = 0.5f;
                    dragonBreaths[i].VirtualMachineAdapter = fireScript;
                    dragonBreaths[i].ResistValue = ActorValue.None;
                }

                for (int i = 2; i < 4; i++) //frost effects
                {
                    dragonBreaths[i].SecondActorValueWeight = 0.1f; // less stamina damage
                    dragonBreaths[i].VirtualMachineAdapter = frostScript;
                    dragonBreaths[i].ResistValue = ActorValue.None;
                }

                //is it better than doing it for each effect separately?
            }

            if (!state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Dragonborn.esm"))) return;
            IMagicEffect effectCopy = CopyEffect(state, Engarde.MagicEffect.MCT_DragonInjuryMouth);

            ExtendedList<ScriptProperty> properties = effectCopy.VirtualMachineAdapter!.Scripts[0].Properties;
            foreach (var scriptProperty in properties.Cast<ScriptObjectProperty>())
            {
                scriptProperty.Object = scriptProperty.Name switch
                {
                    "shout13" => Dragonborn.Shout.DLC2DragonFireBreathShout06,
                    "shout14" => Dragonborn.Shout.DLC2DragonFrostBreathShout06,
                    _ => scriptProperty.Object
                };
            }
        }

        private static void PatchSpells(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static void AddStaggerEffects(ISpell spell)
            {
                EffectData staggerEffectData = new()
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 1
                };
                Effect staggerEffect1 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer1,
                    Data = staggerEffectData
                };
                Effect staggerEffect2 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer2,
                    Data = staggerEffectData
                };
                Effect staggerEffect3 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer3,
                    Data = staggerEffectData
                };
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer4,
                    Data = staggerEffectData
                };
                Effect knockEffect = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockdownAirTarget,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                };
                spell.Effects.Add(knockEffect);
                spell.Effects.Add(staggerEffect1);
                spell.Effects.Add(staggerEffect2);
                spell.Effects.Add(staggerEffect3);
                spell.Effects.Add(staggerEffect4);
            }

            static void AddPowerStaggerEffects(ISpell spell)
            {
                EffectData staggerEffectData = new()
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 1
                };
                Effect staggerEffect1 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer1,
                    Data = staggerEffectData
                };
                Effect staggerEffect2 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer2,
                    Data = staggerEffectData
                };
                Effect staggerEffect3 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer3,
                    Data = staggerEffectData
                };
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_PowerStaggersPlayer4,
                    Data = staggerEffectData
                };
                Effect knockEffect = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockdownAirTarget,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                };
                spell.Effects.Add(knockEffect);
                spell.Effects.Add(staggerEffect1);
                spell.Effects.Add(staggerEffect2);
                spell.Effects.Add(staggerEffect3);
                spell.Effects.Add(staggerEffect4);
            }

            static ISpell CopySpell(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState,
                IFormLinkGetter<ISpellGetter> spellLink)
            {
                return patcherState.PatchMod.Spells.GetOrAddAsOverride(spellLink, patcherState.LinkCache);
            }

            void TuneLDragonSpell(ISpell spell, int increment, int duration)
            {
                
                if (spell.Effects.Count != state.LinkCache.Resolve<ISpellGetter>(spell.FormKey, ResolveTarget.Origin).Effects.Count)
                    Console.WriteLine(
                        $"\nWarning: some mod in your Load Order has changed the number of effects of the {spell.FormKey}:{spell.EditorID}. You must check in xEdit if the values are set correctly");
                spell.Flags |= SpellDataFlag.IgnoreResistance;
                for (int i = 0; i < spell.Effects.Count; i++)
                {
                    spell.Effects[i].Data!.Magnitude = 20 + i * increment;
                    spell.Effects[i].Data!.Duration = duration;
                }
            }

            static void TuneDragonBreathSpells(ISpell spell, float magnitude, int duration)
            {
                spell.Flags |= SpellDataFlag.IgnoreResistance;
                spell.Effects[0].Data ??= new EffectData();
                spell.Effects[0].Data!.Magnitude = magnitude;
                spell.Effects[0].Data!.Duration = duration;
            }

            Effect damageStamina = new()
            {
                BaseEffect = Engarde.MagicEffect.MCT_DamageStaminaByWeapon,
                Data = new EffectData
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 0
                }
            };
            Effect knockdownByWeapon = new()
            {
                BaseEffect = Engarde.MagicEffect.MCT_KnockdownByWeapon,
                Data = new EffectData
                {
                    Magnitude = 0,
                    Area = 0,
                    Duration = 0
                }
            };

            ISpell spellCopy = CopySpell(state, Engarde.Spell.MCT_PowerAttackCoolDownSpell);
            spellCopy.Effects[0].Data!.Duration = _settings.Value.powerAttacks.powerAttackCooldown;

            spellCopy = CopySpell(state, Engarde.Spell.MCT_NoStaminaRegenWhileRunning);
            spellCopy.Effects[0].Data!.Magnitude = _settings.Value.staminaSettings.runningStaminaRatePenalty;

            if (_settings.Value.weaponSettings.weakToArmor)
            {
                spellCopy = CopySpell(state, Engarde.Spell.MCT_NormalAttackSpell);
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_HitRepelledRight,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 0
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_HitRepelledLeft,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 0
                    }
                });
            }

            if (_settings.Value.weaponSettings.bluntKnocksDown)
            {
                spellCopy = CopySpell(state, Engarde.Spell.MCT_NormalAttackSpell);
                spellCopy.Effects.Add(damageStamina);
            }

            if (_settings.Value.weaponSettings.bluntKnocksDown)
            {
                spellCopy = CopySpell(state, Engarde.Spell.MCT_PowerAttackSpell);
                spellCopy.Effects.Add(damageStamina);
                spellCopy.Effects.Add(knockdownByWeapon);
            }

            if (_settings.Value.weaponSettings.bluntKnocksDown)
            {
                spellCopy = CopySpell(state, Engarde.Spell.MCT_SidePowerAttackSpell);
                spellCopy.Effects.Add(damageStamina);
            }

            if (_settings.Value.weaponSettings.bluntKnocksDown)
            {
                spellCopy = CopySpell(state, Engarde.Spell.MCT_BackPowerAttackSpell);
                spellCopy.Effects.Add(damageStamina);
                spellCopy.Effects.Add(knockdownByWeapon);
            }

            spellCopy = CopySpell(state, Engarde.Spell.MCT_MeleeActorMonitorSpell);
            if (_settings.Value.npcSettings.staminaManagement)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorStaminaControl,
                    Data = new EffectData
                    {
                        Magnitude = 300,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaSpeed1,
                    Data = new EffectData
                    {
                        Magnitude = 45,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaAttackSpeed1,
                    Data = new EffectData
                    {
                        Magnitude = 0.25f,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaSpeed2,
                    Data = new EffectData
                    {
                        Magnitude = 25,
                        Area = 0,
                        Duration = 2
                    }
                });
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorOutOfStaminaAttackSpeed2,
                    Data = new EffectData
                    {
                        Magnitude = 0.15f,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.npcSettings.npcDodging)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_NPCCanDodge,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.npcSettings.npcAttackWindup)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorBehaviorAttackWillWindUp,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 2
                    }
                });
            }

            if (_settings.Value.defensiveActions.defensiveActions)
            {
                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_ActorVerticalAttacking,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 1
                    }
                });
            }

            spellCopy = CopySpell(state, Engarde.Spell.MCT_ArrowAttackedSlowTimeSpell);
            spellCopy.Effects[0].Data!.Magnitude *= _settings.Value.combatFocus.worldSpeedMult;
            spellCopy.Effects[0].Data!.Duration =
                (int) Math.Round(spellCopy.Effects[0].Data!.Duration * _settings.Value.combatFocus.durationMult);

            spellCopy = CopySpell(state, Engarde.Spell.MCT_PowerAttackedSlow01TimeSpell);
            spellCopy.Effects[0].Data!.Magnitude *= _settings.Value.combatFocus.worldSpeedMult;
            spellCopy.Effects[0].Data!.Duration =
                (int) Math.Round(spellCopy.Effects[0].Data!.Duration * _settings.Value.combatFocus.durationMult);

            if (_settings.Value.npcSettings.giantTweaks)
            {
                Effect staggerBig = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayerFromGroundShake,
                    Data = new EffectData
                    {
                        Magnitude = 0.25f,
                        Area = 14,
                        Duration = 1
                    }
                };

                Effect staggerSmall = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayerFromGroundShake,
                    Data = new EffectData
                    {
                        Magnitude = 0.5f,
                        Area = 7,
                        Duration = 1
                    }
                };
                spellCopy = CopySpell(state, Skyrim.Spell.crGiantClubSlam);
                spellCopy.Effects.RemoveAll(x =>
                    x.BaseEffect.FormKey == Skyrim.MagicEffect.crStaggerAttackAreaEffectGiantSlam.FormKey);

                spellCopy.Effects.Add(staggerSmall);
                spellCopy.Effects.Add(staggerBig);

                spellCopy.Effects.Add(new Effect
                {
                    BaseEffect = Engarde.MagicEffect.MCT_KnockDown,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 0
                    }
                });

                spellCopy = CopySpell(state, Skyrim.Spell.crGiantStomp);
                spellCopy.Effects.RemoveAll(x =>
                    x.BaseEffect.FormKey == Skyrim.MagicEffect.crStaggerAttackAreaEffectGiantStomp.FormKey);
                spellCopy.Effects.Add(staggerSmall);
                spellCopy.Effects.Add(staggerBig);


                spellCopy = CopySpell(state, Skyrim.Spell.crGiantMagicResistance);
                spellCopy.Effects[0].Data!.Magnitude = 66;
            }

            if (_settings.Value.npcSettings.dragonTweaks)
            {
                Effect staggerEffect4 = new()
                {
                    BaseEffect = Engarde.MagicEffect.MCT_StaggersPlayer4,
                    Data = new EffectData
                    {
                        Magnitude = 0,
                        Area = 0,
                        Duration = 1
                    }
                };
                spellCopy = CopySpell(state, Skyrim.Spell.L_VoiceDragonFire01);
                TuneLDragonSpell(spellCopy, 5, 1);
                spellCopy.Effects.Add(staggerEffect4);

                spellCopy = CopySpell(state, Skyrim.Spell.L_VoiceDragonFireBall01);
                TuneLDragonSpell(spellCopy, 10, 0);
                spellCopy.Effects.Add(staggerEffect4);

                spellCopy = CopySpell(state, Skyrim.Spell.L_VoiceDragonFrost01);
                TuneLDragonSpell(spellCopy, 10, 1);
                spellCopy.Effects.RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed.FormKey);

                spellCopy = CopySpell(state, Skyrim.Spell.L_VoiceDragonFrostBall01);
                TuneLDragonSpell(spellCopy, 10, 0);
                spellCopy.Effects.RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed.FormKey);

                List<ISpell> dragonShouts = new()
                {
                    CopySpell(state, Skyrim.Spell.VoiceDragonFire01),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFire02),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFire03),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFire04),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFire05),
                    CopySpell(state, Dragonborn.Spell.DLC2VoiceDragonFire06),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFireBall01),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFireBall02),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFireBall03),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFireBall04),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFireBall05),
                    CopySpell(state, Dragonborn.Spell.DLC2VoiceDragonFireBall06),

                    CopySpell(state, Skyrim.Spell.VoiceDragonFrost01),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrost02),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrost03),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrost04),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrost05),
                    CopySpell(state, Dragonborn.Spell.DLC2VoiceDragonFrost06),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrostBall01),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrostBall02),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrostBall03),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrostBall04),
                    CopySpell(state, Skyrim.Spell.VoiceDragonFrostBall05),
                    CopySpell(state, Dragonborn.Spell.DLC2VoiceDragonFrostBall06),
                };

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i], 20 + 5 * i, 1);
                    dragonShouts[i].Effects.Add(staggerEffect4);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 6], 20 + 10 * i, 0);
                    dragonShouts[i + 6].Effects.Add(staggerEffect4);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 12], 20 + 10 * i, 1);
                    dragonShouts[i + 12].Effects
                        .RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed.FormKey);
                }

                for (int i = 0; i < 6; i++)
                {
                    TuneDragonBreathSpells(dragonShouts[i + 18], 20 + 10 * i, 0);
                    dragonShouts[i + 18].Effects
                        .RemoveAll(x => x.BaseEffect.FormKey == Skyrim.MagicEffect.FrostSlowConcAimed.FormKey);
                }
            }

            if (_settings.Value.staggerSettings.weaponStagger)
            {
                if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Savage Skyrim Std.esp")))
                {
                    List<ISpell> savageSkyrimSpells = new()
                    {
                        CopySpell(state, SavageSkyrim.Spell.__AA_Animal_ForceStagger),
                        CopySpell(state, SavageSkyrim.Spell.__AB_Animal_PRED_BleedAttack_Bear),
                        CopySpell(state, SavageSkyrim.Spell.__AB_Animal_PRED_BleedAttack_Skeever),
                        CopySpell(state, SavageSkyrim.Spell.__AB_Animal_PRED_BleedAttack_SabreCat),
                        CopySpell(state, SavageSkyrim.Spell.__AB_Animal_PRED_BleedAttack_Wolf)
                    };
                    savageSkyrimSpells.ForEach(x =>
                        x.Effects.RemoveAll(effect =>
                            effect.BaseEffect.FormKey == SavageSkyrim.MagicEffect.__A2_STHC_Stagger.FormKey));

                    savageSkyrimSpells.ForEach(AddStaggerEffects);

                    ISpell powerStaggerSpell = CopySpell(state, SavageSkyrim.Spell.__AA_Animal_ForceThrow_Small);

                    powerStaggerSpell.Effects.RemoveAll(x =>
                        x.BaseEffect.FormKey == SavageSkyrim.MagicEffect.__A2_STHC_ForceThrow_2.FormKey);

                    AddPowerStaggerEffects(powerStaggerSpell);
                }

                List<ISpell> staggeringAttackSpells = new()
                {
                    CopySpell(state, Skyrim.Spell.AAAFrostTouch),
                    CopySpell(state, Skyrim.Spell.SilentMoonsEnchantSpell),
                    CopySpell(state, Skyrim.Spell.crAtronachFlameMeleeAttack),
                    CopySpell(state, Skyrim.Spell.crAtronachFlameMeleePowerAttack),
                    CopySpell(state, Skyrim.Spell.crAtronachStormMeleeAttack),
                    CopySpell(state, Skyrim.Spell.crAtronachFrostMeleeAttack),
                    CopySpell(state, Skyrim.Spell.crChaurusPoisonBite01),
                    CopySpell(state, Skyrim.Spell.crChaurusPoisonBite02),
                    CopySpell(state, Dawnguard.Spell.DLC1crChaurusPoisonBite03),
                    CopySpell(state, Skyrim.Spell.crSpider02PoisonBite),
                    CopySpell(state, Skyrim.Spell.crSpider03PoisonBite),
                    CopySpell(state, Skyrim.Spell.crSpider01PoisonBite),

                    CopySpell(state, Skyrim.Spell.DiseaseAtaxia),
                    CopySpell(state, Skyrim.Spell.DiseaseBoneBreakFever),
                    CopySpell(state, Skyrim.Spell.DiseaseBrainRot),
                    CopySpell(state, Skyrim.Spell.DiseaseRattles),
                    CopySpell(state, Skyrim.Spell.DiseaseRockjoint),
                    CopySpell(state, Skyrim.Spell.DiseaseWitbane),

                    CopySpell(state, Skyrim.Spell.crFalmerPoisonedWeapon01),
                    CopySpell(state, Skyrim.Spell.crFalmerPoisonedWeapon02),
                    CopySpell(state, Skyrim.Spell.crFalmerPoisonedWeapon03),
                    CopySpell(state, Skyrim.Spell.crFalmerPoisonedWeapon04),
                    CopySpell(state, Skyrim.Spell.crFalmerPoisonedWeapon05),
                    CopySpell(state, Dawnguard.Spell.DLC1crGargoyleSmallAbsorbHealth),
                    CopySpell(state, Dawnguard.Spell.DLC1crGargoyleAbsorbHealth),
                    CopySpell(state, Dawnguard.Spell.DLC1VampirePoisonTalons),
                    CopySpell(state, Dawnguard.Spell.DLC1crDeathHoundMeleeAttack),
                    CopySpell(state, Dragonborn.Spell.DLC2crAshGuadianMeleeAttack),
                    CopySpell(state, Dragonborn.Spell.DLC2DiseaseDroops),
                    CopySpell(state, Dragonborn.Spell.DLC2ExpSpiderAlbinoPoisonBite),
                    CopySpell(state, Dragonborn.Spell.DLC2crFireWyrmMeleeAttack)
                };
                staggeringAttackSpells.ForEach(AddStaggerEffects);

                bool enderalEnabled =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Enderal - Forgotten Stories.esm"));
                if (enderalEnabled)
                {
                    // this spell's formId exist in vanilla Skyrim, must check if its Enderal
                    spellCopy = CopySpell(state, Enderal.Spell.QyranianStance);
                    spellCopy.Effects.Add(new Effect
                    {
                        BaseEffect = Engarde.MagicEffect.MCT_WeaponSpeedPenalty,
                        Data = new EffectData
                        {
                            Magnitude = 1.0f,
                            Area = 0,
                            Duration = 0
                        }
                    });
                }

                bool containsGrowl =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Growl - Werebeasts of Skyrim.esp"));

                if (_settings.Value.npcSettings.werewolfTweaks)
                {
                    if (containsGrowl)
                    {
                        spellCopy = CopySpell(state, Growl.Spell.HRI_Werewolf_Spell_Attack);
                        AddStaggerEffects(spellCopy);
                        EffectData staggerData = new()
                        {
                            Magnitude = 0,
                            Area = 0,
                            Duration = 1
                        };
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_StaggersOthers0,
                            Data = staggerData
                        });
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_StaggersOthers1,
                            Data = staggerData
                        });
                    }

                    spellCopy = CopySpell(state, Skyrim.Spell.AbWerewolf);

                    if (!containsGrowl)
                    {
                        var effect = spellCopy.Effects.Find(x =>
                            x.BaseEffect.FormKey == Skyrim.MagicEffect.AbFortifyStamina.FormKey &&
                            x.Conditions.Count == 0);
                        if (effect != null)
                        {
                            effect.Data!.Magnitude = 300;
                        }

                        effect = spellCopy.Effects.Find(x =>
                            x.BaseEffect.FormKey == Skyrim.MagicEffect.AbFortifyHealth.FormKey &&
                            x.Conditions.Count == 0);

                        if (effect != null)
                        {
                            effect.Data!.Magnitude = 200;
                        }
                    }

                    spellCopy.Effects.Add(new Effect
                    {
                        BaseEffect = Engarde.MagicEffect.MCT_WeaponSpeedPenalty,
                        Data = new EffectData
                        {
                            Magnitude = 0.2f,
                            Area = 0,
                            Duration = 0
                        }
                    });

                    if (containsGrowl)
                    {
                        spellCopy = CopySpell(state, Dragonborn.Spell.DLC2AbWerebear);
                        var effect = spellCopy.Effects.Find(x =>
                            x.BaseEffect.FormKey == Skyrim.MagicEffect.AbFortifyStamina.FormKey &&
                            x.Conditions.Count == 0);
                        if (effect != null)
                        {
                            effect.Data!.Magnitude = 300;
                        }

                        effect = spellCopy.Effects.Find(x =>
                            x.BaseEffect.FormKey == Skyrim.MagicEffect.AbFortifyHealth.FormKey &&
                            x.Conditions.Count == 0);
                        if (effect != null)
                        {
                            effect.Data!.Magnitude = 400;
                        }

                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_WeaponSpeedPenalty,
                            Data = new EffectData
                            {
                                Magnitude = 0.3f,
                                Area = 0,
                                Duration = 0
                            }
                        });
                        spellCopy.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_MoveSpeedPenalty,
                            Data = new EffectData
                            {
                                Magnitude = 30,
                                Area = 0,
                                Duration = 0
                            }
                        });
                    }

                    spellCopy = CopySpell(state, Skyrim.Spell.WerewolfFeed);
                    spellCopy.Effects.Add(new Effect
                    {
                        BaseEffect = Engarde.MagicEffect.MCT_BeastFeed,
                        Data = new EffectData
                        {
                            Magnitude = 100,
                            Area = 0,
                            Duration = 0
                        }
                    });

                    List<ISpell> werewolfHowlSpells = new()
                    {
                        CopySpell(state, Skyrim.Spell.HowlWerewolfFear1),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfFear2),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfFear3),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfDetectLife1),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfDetectLife2),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfDetectLife3),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfSummonWolves1),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfSummonWolves2),
                        CopySpell(state, Skyrim.Spell.HowlWerewolfSummonWolves3)
                    };
                    if (containsGrowl)
                    {
                        werewolfHowlSpells.Add(CopySpell(state, Growl.Spell.HRI_Howl_Spell_RevertForm));
                    }

                    werewolfHowlSpells.ForEach(spell =>
                    {
                        spell.Effects.Add(new Effect
                        {
                            BaseEffect = Engarde.MagicEffect.MCT_WerewolfHowl,
                            Data = new EffectData
                            {
                                Magnitude = 0,
                                Area = 0,
                                Duration = 0
                            }
                        });
                    });
                }

                /*bool Predicate(ISpellGetter spell)
                {
                    return spell.Effects.Any(x =>
                    {
                        var y = x.BaseEffect.Resolve(state.LinkCache);
                        bool isFireSpell = y.Keywords?.Contains(Skyrim.Keyword.MagicDamageFire) ?? false;
                        bool isDispeling = y.Flags.EnumerateContainedFlags()
                            .Contains(MagicEffect.Flag.DispelWithKeywords);
                        return !isDispeling && isFireSpell;
                    });
                }*/

                /*foreach (ISpellGetter spell in state.LoadOrder.PriorityOrder.Spell().WinningOverrides().Where(Predicate))
                {
                    Console.WriteLine(spell.EditorID);
                }*/
            }
        }

        private static void PatchWeaponSpeedEffects(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            HashSet<IFormLinkNullable<IMagicEffectGetter>> weaponSpeedEffects,
            HashSet<IFormLinkNullable<IMagicEffectGetter>> leftWeaponSpeedEffects)
        {
            List<IMagicEffectGetter> winningOverrides =
                state.LoadOrder.PriorityOrder.WinningOverrides<IMagicEffectGetter>().ToList();

            weaponSpeedEffects.Add(
                winningOverrides
                    .AsParallel()
                    .Where(effect => effect.Archetype.ActorValue == ActorValue.WeaponSpeedMult ||
                                     effect.SecondActorValue == ActorValue.WeaponSpeedMult)
                    .Select(effect => effect.AsNullableLink()));

            leftWeaponSpeedEffects.Add(
                winningOverrides
                    .AsParallel()
                    .Where(effect =>
                        effect.Archetype.ActorValue == ActorValue.LeftWeaponSpeedMultiply ||
                        effect.SecondActorValue == ActorValue.LeftWeaponSpeedMultiply)
                    .Select(effect => effect.AsNullableLink()));
        }

        private static void PatchWeaponSpeedSpell(IPatcherState<ISkyrimMod, ISkyrimModGetter> state,
            HashSet<IFormLinkNullable<IMagicEffectGetter>> weaponSpeedEffects,
            HashSet<IFormLinkNullable<IMagicEffectGetter>> leftWeaponSpeedEffects)
        {
            foreach (ISpellGetter spell in state.LoadOrder.PriorityOrder.Spell().WinningOverrides())
            {
                bool Predicate(IEffectGetter x) =>
                    (weaponSpeedEffects.Contains(x.BaseEffect) ||
                     leftWeaponSpeedEffects.Contains(x.BaseEffect)) && x.Data?.Magnitude > 1;

                var haveWeaponSpeedEffect = spell.Effects.Any(Predicate);
                if (!haveWeaponSpeedEffect) continue;
                var spellCopy = state.PatchMod.Spells.GetOrAddAsOverride(spell);
                spellCopy.Effects.Where(Predicate).ForEach(effect => { effect.Data!.Magnitude -= 1; });
            }
        }

        private static void PatchProjectiles(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (!_settings.Value.npcSettings.dragonTweaks) return;

            static Projectile CopyProjectile(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState,
                IFormLinkGetter<IProjectileGetter> projLink)
            {
                return patcherState.PatchMod.Projectiles.GetOrAddAsOverride(projLink, patcherState.LinkCache);
            }

            var projectileCopy = CopyProjectile(state, Skyrim.Projectile.DragonFrostProjectile01);
            projectileCopy.Model = new Model
            {
                File = "Magic\\FXFrostBallWispyProjectile.nif"
            };
            projectileCopy.Type = Projectile.TypeEnum.Missile;
            projectileCopy.Speed = 500;
            projectileCopy.CollisionRadius = 20;

            // frost ball projectile, slower, bigger radius
            projectileCopy = CopyProjectile(state, Skyrim.Projectile.DragonFrostBallWispyProjectile);
            projectileCopy.Speed = 600;
            projectileCopy.CollisionRadius = 10;
        }

        private static void PatchMovement(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            static IMovementType CopyMovt(IPatcherState<ISkyrimMod, ISkyrimModGetter> patcherState,
                IFormLinkGetter<IMovementTypeGetter> movtLink)
            {
                return patcherState.PatchMod.MovementTypes.GetOrAddAsOverride(movtLink, patcherState.LinkCache);
            }

            static void ChangeMovt(IMovementType movt, int speed, int forwardSpeed)
            {
                movt.LeftRun = speed;
                movt.RightRun = speed;
                movt.BackRun = speed;
                movt.ForwardRun = speed + forwardSpeed;
            }

            if (_settings.Value.movementSettings.patchSpeed)
            {
                IMovementType movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_1HM_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.oneHandSpeed, 70);

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_2HM_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.twoHandSpeed, 100);

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Bow_MT);
                ChangeMovt(movtCopy, _settings.Value.movementSettings.bowSpeed, 50);
            }

            if (_settings.Value.movementSettings.attackCommitment)
            {
                var movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Attacking_MT);
                movtCopy.LeftWalk = 30;
                movtCopy.LeftRun = 30;
                movtCopy.RightWalk = 30;
                movtCopy.RightRun = 30;
                movtCopy.ForwardWalk = 30;
                movtCopy.ForwardRun = 235;
                movtCopy.BackWalk = 30;
                movtCopy.BackRun = 30;
                movtCopy.RotateInPlaceWalk = 60;
                movtCopy.RotateInPlaceRun = 60;
                movtCopy.RotateWhileMovingRun = 60;

                movtCopy = CopyMovt(state, Skyrim.MovementType.NPC_Attacking2H_MT);
                movtCopy.LeftWalk = 10;
                movtCopy.LeftRun = 10;
                movtCopy.RightWalk = 10;
                movtCopy.RightRun = 10;
                movtCopy.ForwardWalk = 10;
                movtCopy.ForwardRun = 235;
                movtCopy.BackWalk = 10;
                movtCopy.BackRun = 10;
                movtCopy.RotateInPlaceWalk = 30;
                movtCopy.RotateInPlaceRun = 30;
                movtCopy.RotateWhileMovingRun = 30;
            }
        }

        private static void PatchRacesJson(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, Config config)
        {
            IModListing<ISkyrimModGetter> listing = state.LoadOrder.GetIfEnabled(Engarde.ModKey);
            Dictionary<string, IFormLink<IKeywordGetter>> keywords =
                listing.Mod!.Keywords.ToDictionary(x => x.EditorID!, x => x.AsLink());
            Dictionary<string, IFormLink<ISpellGetter>> spells =
                listing.Mod!.Spells.ToDictionary(x => x.EditorID!, x => x.AsLink());
            List<(IRaceGetter, RaceData)> races = state.LoadOrder.PriorityOrder.Race().WinningOverrides()
                .AsParallel()
                .Where(race => race.EditorID != null)
                .SelectWhere(race =>
                    config.Races.TryGetValue(race.BehaviorGraph.Male?.File ?? "", out var raceData)
                        ? TryGet<(IRaceGetter, RaceData)>.Succeed((race, raceData))
                        : TryGet<(IRaceGetter, RaceData)>.Failure)
                .ToList();

            foreach (var tuple in races)
            {
                var (race, raceData) = tuple;

                var raceCopy = state.PatchMod.Races.GetOrAddAsOverride(race);
                raceData.Keywords.ForEach(keyword => raceCopy.AddKeyword(keywords[keyword])
                );

                if (_settings.Value.npcSettings.addArmorToArmored && raceData.Armor != ArmorValue.NoArmor)
                {
                    raceCopy.ActorEffect ??= new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();

                    raceCopy.ActorEffect.Add(raceData.Armor switch
                    {
                        ArmorValue.Armor250 => Engarde.Spell.MCT_BonusArmor250,
                        ArmorValue.Armor500 => Engarde.Spell.MCT_BonusArmor500,
                        _ => throw new ArgumentOutOfRangeException(nameof(raceData.Armor),
                            "don't know how did you get here, but one of armor values in config is wrong")
                    });
                }

                if (raceData.LowAttacks)
                {
                    raceCopy.Attacks.Where(IsValidAttack).ForEach(x =>
                        SetAttackType(x, Engarde.Keyword.MCT_VerticalAttack));
                }

                if (raceData.RemoveSpell)
                {
                    raceCopy.ActorEffect ??= new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    raceCopy.ActorEffect.Remove(Engarde.Spell.MCT_DefaultRaceSpell);
                }

                if (raceData.AddSpell)
                {
                    raceCopy.ActorEffect ??= new ExtendedList<IFormLinkGetter<ISpellRecordGetter>>();
                    raceCopy.ActorEffect.Add(Engarde.Spell.MCT_NPCRaceSpell);
                }

                if (!float.IsNaN(raceData.BaseMass))
                {
                    raceCopy.BaseMass = raceData.BaseMass;
                }

                if (!float.IsNaN(raceData.UnarmedDamage))
                {
                    raceCopy.UnarmedDamage = raceData.UnarmedDamage * _settings.Value.npcSettings.unarmedDamageMult;
                }

                if (!float.IsNaN(raceData.UnarmedReach))
                {
                    raceCopy.UnarmedReach = raceData.UnarmedReach;
                }

                if (!float.IsNaN(raceData.UnarmedReach))
                {
                    raceCopy.UnarmedReach = raceData.UnarmedReach;
                }

                if (!float.IsNaN(raceData.AngularAcceleration))
                {
                    raceCopy.AngularAccelerationRate = raceData.AngularAcceleration *
                                                       _settings.Value.npcSettings.angularAccelerationMult;
                }

                if (!float.IsNaN(raceData.AngularAccelerationHard))
                {
                    raceCopy.AngularAccelerationRate = raceData.AngularAccelerationHard;
                }

                raceCopy.UnarmedDamage *= raceData.UnarmedDamageMult;

                if (raceData.Attacks.Count == 0) continue;
                IEnumerable<(Mutagen.Bethesda.Skyrim.Attack attackToPatch, Attack data)> attacksToPatch = raceCopy
                    .Attacks
                    .Where(IsValidAttack)
                    .Where(x => raceData.Attacks.ContainsKey(x.AttackEvent!))
                    .Select(x =>
                    {
                        raceData.Attacks.TryGetValue(x.AttackEvent!, out var attack);
                        return (attackToPatch: x, data: attack!);
                    });

                foreach ((Mutagen.Bethesda.Skyrim.Attack, Attack) attackTuple in attacksToPatch)
                {
                    var (attackToPatch, data) = attackTuple;
                    if (!float.IsNaN(data.StrikeAngle))
                    {
                        attackToPatch.AttackData!.StrikeAngle = data.StrikeAngle;
                    }

                    if (!float.IsNaN(data.AttackAngle))
                    {
                        attackToPatch.AttackData!.AttackAngle = data.AttackAngle;
                    }

                    if (!float.IsNaN(data.AttackChance))
                    {
                        attackToPatch.AttackData!.Chance = data.AttackChance;
                    }

                    if (!float.IsNaN(data.DamageMult))
                    {
                        attackToPatch.AttackData!.DamageMult = data.DamageMult;
                    }

                    attackToPatch.AttackData!.DamageMult += data.DamageMultIncr;
                    if (data.AttackSpell != "None")
                    {
                        attackToPatch.AttackData.Spell.SetTo(spells[data.AttackSpell]);
                    }

                    switch (data.AttackType)
                    {
                        case "Null":
                            attackToPatch.AttackData.AttackType.SetToNull();
                            break;
                        case "None": break;
                        default:
                            attackToPatch.AttackData.AttackType = keywords[data.AttackType];
                            break;
                    }

                    if (data.Flag != 0)
                    {
                        attackToPatch.AttackData.Flags |= data.Flag;
                    }
                }
            }
        }

        private static void PatchRacesEdgeCases(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            HashSet<string> behaviours = new()
            {
                "Actors\\AtronachFrost\\AtronachFrostProject.hkx",
                "Actors\\Draugr\\DraugrProject.hkx",
                "Actors\\Draugr\\DraugrSkeletonProject.hkx",
                "Actors\\DwarvenSteamCenturion\\SteamProject.hkx",
                "Actors\\Dragon\\DragonProject.hkx",
                "Actors\\FrostbiteSpider\\FrostbiteSpiderProject.hkx",
                "Actors\\Giant\\GiantProject.hkx",
                "Actors\\Character\\DefaultMale.hkx",
                "Actors\\WerewolfBeast\\WerewolfBeastProject.hkx"
            };
            List<IRaceGetter> edgeCasesToPatch = state.LoadOrder.PriorityOrder.Race().WinningOverrides()
                .AsParallel()
                .Where(race => race.EditorID != null && behaviours.Contains(race.BehaviorGraph.Male?.File ?? ""))
                .ToList();
            foreach (var race in edgeCasesToPatch)
            {
                Race raceCopy = state.PatchMod.Races.GetOrAddAsOverride(race);
                var growlEnabled =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Growl - Werebeasts of Skyrim.esp"));
                var enderalEnabled =
                    state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Enderal - Forgotten Stories.esm"));
                string behavior = raceCopy.BehaviorGraph.Male?.File ?? "";
                switch (behavior)
                {
                    case "Actors\\AtronachFrost\\AtronachFrostProject.hkx":
                    {
                        if (state.LoadOrder.ContainsKey(ModKey.FromNameAndExtension("Dwarfsphere.esp")) &&
                            (raceCopy.EditorID?.StartsWith("DwaSp") ?? false) &&
                            (raceCopy.EditorID?.Contains("Cleaner") ?? false))
                        {
                            if (raceCopy.HasKeyword(Engarde.Keyword.MCT_StaggerResist3))
                            {
                                raceCopy.Keywords!.Remove(Engarde.Keyword.MCT_StaggerResist3);
                            }

                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);

                            raceCopy.BaseMass = 8;
                            raceCopy.UnarmedDamage = 50 * _settings.Value.npcSettings.unarmedDamageMult;
                        }

                        break;
                    }
                    case "Actors\\Draugr\\DraugrProject.hkx":
                    case "Actors\\Draugr\\DraugrSkeletonProject.hkx":
                        if (raceCopy.EditorID!.Contains("Skeleton"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                            if (_settings.Value.npcSettings.addArmorToArmored)
                            {
                                raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_BonusArmor250);
                            }

                            raceCopy.BaseMass = 1.5f;
                            raceCopy.AngularAccelerationRate =
                                0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        }

                        break;
                    case "Actors\\DwarvenSteamCenturion\\SteamProject.hkx":
                        raceCopy.Attacks.Where(IsValidAttack).ForEach(attack => attack.AttackData!.Stagger = 0);
                        break;
                    case "Actors\\Dragon\\DragonProject.hkx" when _settings.Value.npcSettings.dragonTweaks:
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DragonRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_ArmoredKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower4);

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_BonusArmor500);
                        }

                        raceCopy.ActorEffect!.Remove(Engarde.Spell.MCT_DefaultRaceSpell);
                        raceCopy.ActorEffect.Add(Engarde.Spell.MCT_StaminaDrainWhileFlying);

                        raceCopy.AngularAccelerationRate = 10;
                        raceCopy.Starting[BasicStat.Health] = 1500;
                        raceCopy.Starting[BasicStat.Stamina] = 350;
                        raceCopy.UnarmedReach = 180;
                        raceCopy.Regen[BasicStat.Health] = 0;
                        raceCopy.Regen[BasicStat.Stamina] = 1;
                        raceCopy.BaseMass = 10;
                        if (raceCopy.EditorID == "AlduinRace")
                        {
                            raceCopy.ActorEffect.Add(Engarde.Spell.MCT_DragonAlduinRaceSpell);
                            raceCopy.UnarmedDamage = 150;
                        }
                        else
                        {
                            raceCopy.ActorEffect.Add(Engarde.Spell.MCT_DragonRaceSpell);
                            raceCopy.UnarmedDamage = 100;
                        }

                        raceCopy.Attacks.Where(IsValidAttack).ForEach(SetDragonAttackData);
                        break;
                    }
                    case "Actors\\FrostbiteSpider\\FrostbiteSpiderProject.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryKnockDown);
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 77;
                        if (raceCopy.EditorID!.Contains("Giant"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                            raceCopy.BaseMass = 3;
                            var spellFormKey = Skyrim.Spell.crSpider03PoisonBite;
                            raceCopy.Attacks.Where(IsValidAttack).ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }
                        else if (raceCopy.EditorID.Contains("Large"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.BaseMass = 1;
                            var spellFormKey = Skyrim.Spell.crSpider02PoisonBite;
                            raceCopy.Attacks.Where(IsValidAttack).ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist0);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower0);
                            raceCopy.BaseMass = 0.2f;
                            var spellFormKey = Skyrim.Spell.crSpider01PoisonBite;
                            raceCopy.Attacks.Where(IsValidAttack).ForEach(x => SetSpiderAttackData(x, spellFormKey));
                        }

                        break;
                    }
                    case "Actors\\Giant\\GiantProject.hkx":
                    {
                        bool? isGiant = null;
                        if (raceCopy.EditorID!.Contains("Giant"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_DamagesStamina);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower4);

                            raceCopy.BaseMass = 8;
                            raceCopy.Starting[BasicStat.Health] = 2700;
                            raceCopy.UnarmedDamage *= 2;
                            raceCopy.UnarmedReach = 250;
                            isGiant = true;
                        }
                        else
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist3);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower3);

                            raceCopy.BaseMass = 6;
                        }

                        if (_settings.Value.npcSettings.addArmorToArmored)
                        {
                            raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_BonusArmor250);
                        }

                        raceCopy.AddKeyword(Engarde.Keyword.MCT_GiantRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_CritImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_KnockDownImmune);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryMoveSpeed);

                        raceCopy.AngularAccelerationRate = 5;
                        if (_settings.Value.npcSettings.giantTweaks)
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaminaControlledKW);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_CanEnrage);
                            raceCopy.Regen[BasicStat.Stamina] = 1;
                        }

                        raceCopy.Attacks.Where(IsValidAttack).ForEach(x => SetGiantAttackData(x, isGiant ?? false));
                        break;
                    }
                    // humanoid npc races
                    case "Actors\\Character\\DefaultMale.hkx":
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_InjuryAttackSpeed);
                        raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_NPCRaceSpell);

                        // Dremora
                        if (raceCopy.EditorID!.Contains("DremoraRace"))
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                        }
                        else
                        {
                            // normal humanoid
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);
                        }

                        // base adjustment from vanilla
                        raceCopy.AngularAccelerationRate = 0.25f * _settings.Value.npcSettings.angularAccelerationMult;
                        raceCopy.UnarmedReach = 64;

                        // no use, attacks added this way aren't valid without behvaior changes
                        // it'll do damage but no attack spell
                        //if (settings.comboAttacks) {
                        //	let addedAttack = xelib.AddArrayItem(record, 'Attacks', 'ATKD\\Damage Mult', '100.32');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Attack Chance', '33.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Attack Angle', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Strike Angle', '35.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Stagger', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Knockdown', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Recovery Time', '0.0');
                        //	xelib.SetFloatValue(addedAttack, 'ATKD\\Stamina Mult', '1.0');
                        //	xelib.AddElementValue(addedAttack, 'ATKE - Attack Event', 'mct2hmComboStart');
                        //}
                        break;
                    }
                    case "Actors\\WerewolfBeast\\WerewolfBeastProject.hkx"
                        when _settings.Value.npcSettings.werewolfTweaks:
                    {
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WerewolfRaceKW);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_WeakAgainstArmored);
                        raceCopy.AddKeyword(Engarde.Keyword.MCT_StaminaControlledKW);

                        raceCopy.Regen[BasicStat.Stamina] = 1;
                        raceCopy.UnarmedReach = 150; // any shorter than 127 will result in werewolf keep retreating

                        bool isWerebeast;
                        if (raceCopy.EditorID?.Contains("Werebear") ?? false)
                        {
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower2);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist4);
                            raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_BonusArmor250);

                            raceCopy.BaseMass = 6;
                            if (growlEnabled)
                            {
                                raceCopy.UnarmedDamage = 10;
                            }
                            else
                            {
                                raceCopy.UnarmedDamage = 25 * _settings.Value.npcSettings.unarmedDamageMult;
                            }

                            raceCopy.Starting[BasicStat.Health] = 1000;
                            raceCopy.Starting[BasicStat.Stamina] = 450;
                            isWerebeast = true;
                        }
                        else if (enderalEnabled && !raceCopy.EditorID!.Contains("Player"))
                        {
                            // enderal's werewolf based mobs
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist1);

                            raceCopy.BaseMass = 1.4f;
                            raceCopy.UnarmedDamage = 10 * _settings.Value.npcSettings.unarmedDamageMult;
                            isWerebeast = false;
                        }
                        else
                        {
                            // Skyrim werewolf and Enderal player werewolf
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerPower1);
                            raceCopy.AddKeyword(Engarde.Keyword.MCT_StaggerResist3);
                            raceCopy.ActorEffect!.Add(Engarde.Spell.MCT_BonusArmor250);

                            raceCopy.BaseMass = 3;
                            // growl and enderal have their own damage scaling, don't mess with it
                            if (!enderalEnabled && !growlEnabled)
                            {
                                raceCopy.UnarmedDamage = 15 * _settings.Value.npcSettings.unarmedDamageMult;
                            }

                            raceCopy.Starting[BasicStat.Health] = 300;
                            raceCopy.Starting[BasicStat.Stamina] = 200;
                            isWerebeast = true;
                        }

                        raceCopy.Attacks.Where(IsValidAttack).ForEach(attack =>
                            SetWerewolfAttackData(attack, isWerebeast, growlEnabled));
                        break;
                    }
                }
            }
        }

        #endregion

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            string configFile = File.ReadAllText(state.RetrieveConfigFile("config.json"));
            var config = JsonConvert.DeserializeObject<Config>(configFile, new JsonSerializerSettings
            {
                NullValueHandling = NullValueHandling.Ignore
            })!;

            state.PatchGlobals();
            PatchArmors(state);
            PatchWeapons(state);
            PatchRaces(state);
            PatchRacesJson(state, config);
            PatchRacesEdgeCases(state);
            PatchPerks(state);
            PatchNpcs(state);
            PatchAttacks(state);
            PatchPowerAttacks(state);
            PatchDodges(state);
            PatchWerewolves(state);
            PatchKillmoves(state);
            PatchIdles(state);
            PatchDefensiveMoves(state);
            PatchEffects(state);
            PatchSpells(state);
            if (_settings.Value.fixAttackSpeed)
            {
                HashSet<IFormLinkNullable<IMagicEffectGetter>> weaponSpeedEffects = new();
                HashSet<IFormLinkNullable<IMagicEffectGetter>> leftWeaponSpeedEffects = new();
                PatchWeaponSpeedEffects(state, weaponSpeedEffects, leftWeaponSpeedEffects);
                PatchWeaponSpeedSpell(state, weaponSpeedEffects, leftWeaponSpeedEffects);
            }

            PatchProjectiles(state);
            PatchMovement(state);
        }
    }
}
